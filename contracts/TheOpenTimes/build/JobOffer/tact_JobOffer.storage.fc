;;
;; Type: StateInit
;; TLB: _ code:^cell data:^cell = StateInit
;;

((cell, cell)) $StateInit$_not_null(tuple v) inline {
    throw_if(128, null?(v));
    var (cell vvv'code, cell vvv'data) = __tact_tuple_destroy_2(v);
    return (vvv'code, vvv'data);
}

;;
;; Type: SendParameters
;; TLB: _ bounce:bool to:address value:int257 mode:int257 body:Maybe ^cell code:Maybe ^cell data:Maybe ^cell = SendParameters
;;

((int, slice, int, int, cell, cell, cell)) $SendParameters$_constructor_bounce_to_value_mode_body_code_data(int bounce, slice to, int value, int mode, cell body, cell code, cell data) inline {
    return (bounce, to, value, mode, body, code, data);
}

((int, slice, int, int, cell, cell, cell)) $SendParameters$_constructor_to_value_mode_bounce_body_code_data(slice to, int value, int mode, int bounce, cell body, cell code, cell data) inline {
    return (bounce, to, value, mode, body, code, data);
}

((int, slice, int, int, cell, cell, cell)) $SendParameters$_constructor_to_value_mode_bounce_body(slice to, int value, int mode, int bounce, cell body) inline {
    return (bounce, to, value, mode, body, null(), null());
}

;;
;; Type: Transfer
;; Header: 0x0f817ea5
;; TLB: transfer#0f817ea5 query_id:uint64 amount:coins destination:address response_destination:address custom_payload:Maybe ^cell forward_ton_amount:coins forward_payload:remainder<slice> = Transfer
;;

builder $Transfer$_store(builder build_0, (int, int, slice, slice, cell, int, slice) v) inline_ref {
    var (v'query_id, v'amount, v'destination, v'response_destination, v'custom_payload, v'forward_ton_amount, v'forward_payload) = v;
    build_0 = store_uint(build_0, 260144805, 32);
    build_0 = build_0.store_uint(v'query_id, 64);
    build_0 = build_0.store_coins(v'amount);
    build_0 = __tact_store_address(build_0, v'destination);
    build_0 = __tact_store_address(build_0, v'response_destination);
    build_0 = ~ null?(v'custom_payload) ? build_0.store_int(true, 1).store_ref(v'custom_payload) : build_0.store_int(false, 1);
    build_0 = build_0.store_coins(v'forward_ton_amount);
    build_0 = build_0.store_slice(v'forward_payload);
    return build_0;
}

cell $Transfer$_store_cell((int, int, slice, slice, cell, int, slice) v) inline {
    return $Transfer$_store(begin_cell(), v).end_cell();
}

((int, int, slice, slice, cell, int, slice)) $Transfer$_constructor_query_id_amount_destination_response_destination_custom_payload_forward_ton_amount_forward_payload(int query_id, int amount, slice destination, slice response_destination, cell custom_payload, int forward_ton_amount, slice forward_payload) inline {
    return (query_id, amount, destination, response_destination, custom_payload, forward_ton_amount, forward_payload);
}

;;
;; Type: Deploy
;; Header: 0x946a98b6
;; TLB: deploy#946a98b6 queryId:uint64 = Deploy
;;

(slice, ((int))) $Deploy$_load(slice sc_0) inline {
    throw_unless(129, sc_0~load_uint(32) == 2490013878);
    var v'queryId = sc_0~load_uint(64);
    return (sc_0, (v'queryId));
}

;;
;; Type: DeployOk
;; Header: 0xaff90f57
;; TLB: deploy_ok#aff90f57 queryId:uint64 = DeployOk
;;

builder $DeployOk$_store(builder build_0, (int) v) inline {
    var (v'queryId) = v;
    build_0 = store_uint(build_0, 2952335191, 32);
    build_0 = build_0.store_uint(v'queryId, 64);
    return build_0;
}

cell $DeployOk$_store_cell((int) v) inline {
    return $DeployOk$_store(begin_cell(), v).end_cell();
}

((int)) $DeployOk$_constructor_queryId(int queryId) inline {
    return (queryId);
}

;;
;; Type: Approve
;; Header: 0x255f38d4
;; TLB: approve#255f38d4 amount:coins = Approve
;;

(slice, ((int))) $Approve$_load(slice sc_0) inline {
    throw_unless(129, sc_0~load_uint(32) == 626997460);
    var v'amount = sc_0~load_coins();
    return (sc_0, (v'amount));
}

;;
;; Type: ChangeStatus
;; Header: 0xf00b2e56
;; TLB: change_status#f00b2e56 status:uint32 = ChangeStatus
;;

(slice, ((int))) $ChangeStatus$_load(slice sc_0) inline {
    throw_unless(129, sc_0~load_uint(32) == 4027264598);
    var v'status = sc_0~load_uint(32);
    return (sc_0, (v'status));
}

;;
;; Type: JobOfferCloseState
;; TLB: _ doer:bool owner:bool = JobOfferCloseState
;;

builder $JobOfferCloseState$_store(builder build_0, (int, int) v) inline {
    var (v'doer, v'owner) = v;
    build_0 = build_0.store_int(v'doer, 1);
    build_0 = build_0.store_int(v'owner, 1);
    return build_0;
}

(slice, ((int, int))) $JobOfferCloseState$_load(slice sc_0) inline {
    var v'doer = sc_0~load_int(1);
    var v'owner = sc_0~load_int(1);
    return (sc_0, (v'doer, v'owner));
}

((int, int)) $JobOfferCloseState$_constructor_doer_owner(int doer, int owner) inline {
    return (doer, owner);
}

;;
;; Type: ContractData
;; TLB: _ title:^string description:^string price:uint64 owner:address doer:Maybe address is_locked:bool state:uint32 jetton_master:address balance:coins my_jetton_address:address = ContractData
;;

(slice, slice, int, slice, slice, int, int, slice, int, slice) $ContractData$_to_external(((slice, slice, int, slice, slice, int, int, slice, int, slice)) v) inline {
    var (v'title, v'description, v'price, v'owner, v'doer, v'is_locked, v'state, v'jetton_master, v'balance, v'my_jetton_address) = v; 
    return (v'title, v'description, v'price, v'owner, v'doer, v'is_locked, v'state, v'jetton_master, v'balance, v'my_jetton_address);
}

((slice, slice, int, slice, slice, int, int, slice, int, slice)) $ContractData$_constructor_title_description_price_owner_doer_is_locked_state_jetton_master_balance_my_jetton_address(slice title, slice description, int price, slice owner, slice doer, int is_locked, int state, slice jetton_master, int balance, slice my_jetton_address) inline {
    return (title, description, price, owner, doer, is_locked, state, jetton_master, balance, my_jetton_address);
}

;;
;; Type: TokenWallet
;;

builder $TokenWallet$init$_store(builder build_0, (slice, slice) v) inline {
    var (v'owner, v'master) = v;
    build_0 = __tact_store_address(build_0, v'owner);
    build_0 = __tact_store_address(build_0, v'master);
    return build_0;
}

(cell, cell) $TokenWallet$_init_child(cell sys', slice $owner, slice $master) inline_ref {
    slice sc' = sys'.begin_parse();
    cell source = sc'~load_dict();
    cell contracts = new_dict();
    
    ;; Contract Code: TokenWallet
    cell mine = __tact_dict_get_code(source, 56445);
    contracts = __tact_dict_set_code(contracts, 56445, mine);
    
    ;; Build cell
    builder b = begin_cell();
    b = b.store_ref(begin_cell().store_dict(contracts).end_cell());
    b = b.store_int(false, 1);
    b = $TokenWallet$init$_store(b, ($owner, $master));
    return (mine, b.end_cell());
}

;;
;; Type: JobOffer
;;

builder $JobOffer$_store(builder build_0, (slice, slice, slice, int, slice, slice, (int, int), int, int, slice) v) inline {
    var (v'order, v'title, v'description, v'price, v'owner, v'doer, (v'job_state'doer, v'job_state'owner), v'state, v'is_locked, v'jetton_master) = v;
    build_0 = build_0.store_ref(begin_cell().store_slice(v'order).end_cell());
    build_0 = build_0.store_ref(begin_cell().store_slice(v'title).end_cell());
    var build_1 = begin_cell();
    build_1 = build_1.store_ref(begin_cell().store_slice(v'description).end_cell());
    build_1 = build_1.store_coins(v'price);
    build_1 = __tact_store_address(build_1, v'owner);
    build_1 = __tact_store_address_opt(build_1, v'doer);
    build_1 = $JobOfferCloseState$_store(build_1, (v'job_state'doer, v'job_state'owner));
    build_1 = build_1.store_int(v'state, 257);
    build_1 = build_1.store_int(v'is_locked, 1);
    var build_2 = begin_cell();
    build_2 = __tact_store_address(build_2, v'jetton_master);
    build_1 = store_ref(build_1, build_2.end_cell());
    build_0 = store_ref(build_0, build_1.end_cell());
    return build_0;
}

(slice, ((slice, slice, slice, int, slice, slice, (int, int), int, int, slice))) $JobOffer$_load(slice sc_0) inline {
    var v'order = sc_0~load_ref().begin_parse();
    var v'title = sc_0~load_ref().begin_parse();
    slice sc_1 = sc_0~load_ref().begin_parse();
    var v'description = sc_1~load_ref().begin_parse();
    var v'price = sc_1~load_coins();
    var v'owner = sc_1~__tact_load_address();
    var v'doer = sc_1~__tact_load_address_opt();
    var v'job_state = sc_1~$JobOfferCloseState$_load();
    var v'state = sc_1~load_int(257);
    var v'is_locked = sc_1~load_int(1);
    slice sc_2 = sc_1~load_ref().begin_parse();
    var v'jetton_master = sc_2~__tact_load_address();
    return (sc_0, (v'order, v'title, v'description, v'price, v'owner, v'doer, v'job_state, v'state, v'is_locked, v'jetton_master));
}

(slice, ((slice, slice, int, slice, slice))) $JobOffer$init$_load(slice sc_0) inline {
    var v'title = sc_0~load_ref().begin_parse();
    var v'description = sc_0~load_ref().begin_parse();
    var v'price = sc_0~load_int(257);
    slice sc_1 = sc_0~load_ref().begin_parse();
    var v'order = sc_1~load_ref().begin_parse();
    var v'jetton_master = sc_1~__tact_load_address();
    return (sc_0, (v'title, v'description, v'price, v'order, v'jetton_master));
}

(slice, slice, slice, int, slice, slice, (int, int), int, int, slice) $JobOffer$_contract_load() impure inline_ref {
    slice $sc = get_data().begin_parse();
    __tact_context_sys = $sc~load_ref();
    int $loaded = $sc~load_int(1);
    if ($loaded) {
        return $sc~$JobOffer$_load();
    } else {
        ;; Allow only workchain deployments
        throw_unless(137, my_address().preload_uint(11) == 1024);
        (slice title, slice description, int price, slice order, slice jetton_master) = $sc~$JobOffer$init$_load();
        $sc.end_parse();
        return $JobOffer$_contract_init(title, description, price, order, jetton_master);
    }
}

() $JobOffer$_contract_store((slice, slice, slice, int, slice, slice, (int, int), int, int, slice) v) impure inline {
    builder b = begin_cell();
    b = b.store_ref(__tact_context_sys);
    b = b.store_int(true, 1);
    b = $JobOffer$_store(b, v);
    set_data(b.end_cell());
}