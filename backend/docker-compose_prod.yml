version: '3.8'

volumes:
  static:
  media:
  redis_data:
  mongo_data:
  web-root:


services:
  base_api:
    build:
      context: .
      dockerfile: docker/python/Dockerfile
    volumes:
      - web-root:/var/www/html
      - .:/usr/src/needify/
    env_file:
      - ./.env
    command: [ "sh", "deploy/entrypoints/run_microservice.sh" ]
    depends_on:
      - redis
      - mongo_needify

  nginx:
    build:
      context: deploy/nginx/
      dockerfile: Dockerfile
    ports:
      - "80:80"
    depends_on:
      - base_api
#  kafka-ui:
#    image: provectuslabs/kafka-ui
#    container_name: kafka-ui
#    ports:
#      - "8080:8080"
#    restart: always
#    environment:
#      - KAFKA_CLUSTERS_0_NAME=local
#      - KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS=kafka:9092
#
#  zookeeper:
#    image: wurstmeister/zookeeper
#    container_name: zookeeper
#    ports:
#      - "2181:2181"
#    restart: always
#
#  kafka:
#    image: wurstmeister/kafka
#    container_name: kafka
#    restart: always
#    ports:
#      - "9092:9092"
#    environment:
#      KAFKA_LISTENERS: "INTERNAL://:29092,EXTERNAL://:9092"
#      KAFKA_ADVERTISED_LISTENERS: "INTERNAL://kafka:29092,EXTERNAL://kafka:9092"
#      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: "INTERNAL:PLAINTEXT,EXTERNAL:PLAINTEXT"
#      KAFKA_INTER_BROKER_LISTENER_NAME: "INTERNAL"
#      KAFKA_ZOOKEEPER_CONNECT: "zookeeper:2181"
#    depends_on:
#      - zookeeper
#    healthcheck:
#      test: [ "CMD", "nc", "-z", "localhost", "9092" ]
#      interval: 10s
#      timeout: 5s
#      retries: 15

  redis:
    image: redis:alpine
    restart: always
    volumes:
      - redis_data:/prod_data

  mongo_needify:
    image: mongo:6
    container_name: mongo_needify
    restart: always
    volumes:
      - ./Volumes/Mongo:/data/prod_db
    command: mongod --port 27018
    ports:
      - "27018:27018"
    environment:
      MONGO_INITDB_ROOT_USERNAME: needify_root
      MONGO_INITDB_ROOT_PASSWORD: needify_root_password


#networks:
#  default:
#    name: crypto